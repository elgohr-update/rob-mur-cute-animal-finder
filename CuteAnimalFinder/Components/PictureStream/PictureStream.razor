@using Tweetinvi.Core.Extensions
@using CuteAnimalFinder.Services
@using CuteAnimalFinder.Models
@using CuteAnimalFinder.Notifications
@using MediatR
@namespace CuteAnimalFinder.Components.PictureStream
@inject ISources _sources
@inject IPrediction _prediction
@inject IPredictionCache _cache
@inject ILogger<PictureStream> _logger
@inject IMediator _mediator
@inject IComponentStateService _state
@inject IJSRuntime _js


<PageTitle>CuteAnimalFinder</PageTitle>

@for (int i = 0; i < _images.Count; i++)
{
    var (key, value) = _images.ElementAt(i);
    var idx = i;
    <div class="card-holder" id=@($"image-{i}")>
            @if (!value)
            {
                <div class="card">

                <div class="card-top">
                    <div class="split-left" @onclick="() => Correct(key, idx)">
                        <i class="bi bi-check" style="color:black"></i>
                    </div>
                    <div class="split-right" @onclick="() => Incorrect(key, idx)">
                        <i class="bi bi-x" style="color:black"></i>
                    </div>
                </div>
                <img src=@key alt="" class="image">
                                                      </div>

            }
            else
            {
                <img src=@key alt="" class="card">
            }
    </div>
}


@code {

    [Parameter]
    public Animal Search { get; set; }

    private Dictionary<string, bool> _images = new();

    private Dictionary<int, bool> _isTaskRunning = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await _sources.GetLatestPictures(Search);
        _logger.LogInformation("Requested pictures:");
        result.ForEach(url => _logger.LogInformation("{Url}",url));
        _images = result.ToDictionary(x => x, _ => false);
        if (_images.IsEmpty())
            return;
        _images = await _prediction.FilterImages(Search, _images.Keys.ToArray());
        for (int i = 0; i < _images.Count; i++)
            _isTaskRunning[i] = false;
        if (!_images.IsEmpty())
            await _mediator.Publish(new SuccessfulLoadNotification());
    }


    private void Incorrect(string img, int idx)
    {
        if (_isTaskRunning[idx])
            return;
        _isTaskRunning[idx] = true;
        _cache.AddPrediction(img, Animal.Neither);
        _images.Remove(img);
        _isTaskRunning[idx] = false;
    }

    private async void Correct(string img, int idx)
    {
        if (_isTaskRunning[idx])
            return;
        _isTaskRunning[idx] = true;
        _images[img] = true;
        _cache.AddPrediction(img, Search);
        if (idx + 1 == _images.Count)
            return;
        var lookupId = $"image-{idx + 1}";
        await _js.InvokeVoidAsync("scrollToElement", lookupId);
        _isTaskRunning[idx] = false;
    }


}