@using Tweetinvi.Core.Extensions
@using CuteAnimalFinder.Services
@using CuteAnimalFinder.Models
@using CuteAnimalFinder.Notifications
@using MediatR
@using CuteAnimalFinder.Extensions
@namespace CuteAnimalFinder.Components.PictureStream
@inject ISources _sources
@inject IPrediction _prediction
@inject ILogger<PictureStream> _logger
@inject IMediator _mediator
@inject IComponentStateService _state
@inject IJSRuntime _js
@inject IConfiguration _config

<PageTitle>CuteAnimalFinder</PageTitle>

@for (var i = 0 ; i < _votes.Count; i++)
{
    var vote = _votes[i];
    var idx = i;
    <div class="card-holder" id=@($"image-{idx}")>
        @if (!vote.HasVoted)
        {
            <div class="card">

                <div class="card-top">
                    <div class="split-left" @onclick="() => _voteCorrect.Invoke(vote)">
                        <i class="bi bi-check" style="color:black"></i>
                    </div>
                    <div class="split-right" @onclick="() => _voteIncorrect.Invoke(vote)">
                        <i class="bi bi-x" style="color:black"></i>
                    </div>
                </div>
                <img src=@vote.Value alt="" class="image">
            </div>
        }
        else
        {
            <img src=@vote.Value alt="" class="card">
        }
    </div>
}


@code {

    [Parameter]
    public Animal Search { get; set; }

    private List<Vote<string>> _votes = new();

    private Once<Vote<string>> _voteIncorrect = null!;
    private Once<Vote<string>> _voteCorrect = null!;

    protected override async Task OnInitializedAsync()
    {
        _voteIncorrect = new Once<Vote<string>>(Incorrect);
        _voteCorrect = new Once<Vote<string>>(Correct);

        var result = await _sources.GetLatestPictures(Search);
        if (result.IsEmpty())
            return;

        _logger.LogInformation("Requested pictures:");
        result.ForEach(url => _logger.LogInformation("{Url}", url));

        var filtered = await _prediction.FilterImages(Search, result);
        _votes = filtered.Select(x => new Vote<string>(x)).ToList();
        if (!_votes.IsEmpty())
            await _mediator.Publish(new SuccessfulLoadNotification());
    }


    private void Incorrect(Vote<string> vote)
    {
        using var ctx = new PredictionDbContext(_config);
        ctx.Predictions.Add(new ImagePrediction(vote.Value, Animal.Neither));
        _votes.Remove(vote);
    }

    private async void Correct(Vote<string> vote)
    {
        vote.Cast();
        await using var ctx = new PredictionDbContext(_config);
        ctx.Predictions.Add(new ImagePrediction(vote.Value, Search));
        var idx = _votes.IndexOf(vote);
        if (idx == _votes.Count - 1)
            return;
        var lookupId = $"image-{idx + 1}";
        await _js.InvokeVoidAsync("scrollToElement", lookupId);
    }


}