@inject IJSRuntime _jsRuntime
@using CuteAnimalFinder.Components

<div class="@NavMenuCssClass fixed-top purple" @onclick="ToggleNavMenu">
    <div class="spacer">&nbsp;</div>
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fas fa-cat" aria-hidden="true"></i> Cats
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="dogs">
                <i class="fas fa-dog"></i> Dogs
            </NavLink>
        </div>
    </nav>
</div>
<nav class="top-row ps-3 navbar navbar-dark fixed-top purple @_navBarScrollCssClass">
    <div class="container-fluid">
        <div class="justify-content-start">
            <div class="d-flex flex-row">
                <a class="navbar-brand" href="">CuteAnimalFinder</a>
            </div>
        </div>
        <div class="justify-content-end">
            <div class="d-flex flex-row">
                <div class="navbar-brand">
                    <LatencyChecker></LatencyChecker>
                </div>
                <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>
    </div>
</nav>
<div class="spacer" id="end-of-nav-bar">&nbsp;</div>


@code {
    private bool _collapseNavMenu = true;
    private string _navBarScrollCssClass = "scrolled-up";

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private int _lastScrollTop = 0;
    private DotNetObjectReference<NavMenu>? _dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _dotNetHelper = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeAsync<Task>("onScrolled", _dotNetHelper);
    }

    [JSInvokable]
    public async Task OnScroll()
    {
        _collapseNavMenu = true;
        var scrollTop = await _jsRuntime.InvokeAsync<int>("getScrollY");
        if (scrollTop != _lastScrollTop)
            _navBarScrollCssClass = scrollTop < _lastScrollTop ? "scrolled-up" : "scrolled-down";
    //Console.WriteLine($"Packet sent at {DateTime.Now} with y {_lastScrollTop} and calc {_navBarScrollCssClass}");
        _lastScrollTop = scrollTop;
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetHelper?.Dispose();
    }

}